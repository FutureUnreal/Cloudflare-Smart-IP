// IP池配置 - 更新时间: 2025-01-30T07:13:33.186875
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.17.217.228",
      "104.19.104.5",
      "104.17.166.1",
      "104.19.55.71",
      "172.67.241.135",
      "104.19.8.72",
      "172.65.88.122",
      "104.19.197.246",
      "104.21.39.62",
      "172.65.159.159",
      "172.65.163.83",
      "104.24.65.55",
      "104.25.61.0",
      "172.67.5.55",
      "104.18.245.61",
      "104.18.246.217",
      "104.16.197.51",
      "172.65.241.97",
      "104.16.233.216",
      "104.19.144.141"
    ],
    "SOUTH": [
      "104.18.53.146",
      "104.17.45.21",
      "172.65.83.124",
      "104.18.175.8",
      "104.21.55.250",
      "172.67.132.144",
      "172.65.124.188",
      "104.17.123.167",
      "172.65.251.193",
      "104.16.62.40",
      "104.18.6.131"
    ],
    "NORTH": [
      "104.19.33.231",
      "104.18.191.86",
      "104.21.84.52",
      "172.67.171.96",
      "172.65.40.217",
      "104.19.184.154",
      "172.67.83.112",
      "104.20.108.52",
      "104.16.244.215",
      "104.17.242.142",
      "172.66.135.51",
      "104.24.188.1",
      "172.65.101.23"
    ],
    "CENTRAL": [
      "104.21.22.166",
      "104.17.88.86",
      "104.20.244.195",
      "172.67.236.50",
      "172.67.111.76",
      "104.25.53.228",
      "104.22.0.192",
      "104.17.94.210",
      "104.25.214.236",
      "104.24.41.169"
    ],
    "SOUTHWEST": [
      "104.16.62.221",
      "104.19.86.135",
      "104.24.138.136",
      "104.25.71.100",
      "172.65.2.242",
      "104.20.121.33",
      "104.18.77.223",
      "104.24.167.170",
      "104.25.76.214",
      "172.66.193.174",
      "104.24.82.86"
    ],
    "NORTHWEST": [
      "172.67.193.104",
      "104.16.82.65",
      "104.20.185.145",
      "104.20.134.33"
    ],
    "NORTHEAST": [
      "104.16.10.248",
      "104.18.216.250",
      "104.17.37.33",
      "172.67.31.167",
      "172.65.116.73",
      "104.20.234.63",
      "104.17.221.118",
      "172.65.116.116",
      "104.18.7.24",
      "104.24.53.253",
      "172.65.178.13",
      "104.24.240.251",
      "104.18.1.106",
      "104.25.192.185",
      "104.24.92.134",
      "172.67.74.255",
      "104.22.11.254"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.19.19.208",
      "104.20.148.18",
      "172.67.241.135",
      "104.24.48.200",
      "172.65.219.47",
      "1.0.0.253",
      "104.21.84.52",
      "104.24.65.55",
      "104.16.82.65"
    ],
    "SOUTH": [
      "104.25.122.251",
      "104.18.53.146",
      "104.25.130.140",
      "172.67.92.128",
      "104.19.153.134",
      "104.25.220.55",
      "104.19.128.116",
      "104.21.55.250",
      "172.65.178.13"
    ],
    "NORTH": [
      "104.19.172.217",
      "104.18.89.125",
      "104.16.62.221",
      "104.25.205.77",
      "172.65.83.124",
      "104.21.111.148",
      "172.65.159.159",
      "104.19.86.135",
      "104.22.78.16",
      "172.65.124.188",
      "104.25.61.0",
      "172.65.14.73",
      "104.18.246.217",
      "104.16.197.51",
      "104.17.242.142",
      "104.18.6.131",
      "172.65.161.250"
    ],
    "CENTRAL": [
      "172.67.138.216",
      "172.66.207.1",
      "104.22.75.230",
      "172.65.143.157",
      "104.25.57.54",
      "104.21.22.166",
      "172.67.36.108",
      "104.18.175.8",
      "104.19.115.47",
      "172.67.236.50",
      "104.25.71.100",
      "104.22.0.192",
      "104.18.77.223",
      "104.24.41.169"
    ],
    "SOUTHWEST": [
      "104.16.44.194",
      "172.67.238.28",
      "104.25.127.127",
      "172.65.88.122",
      "104.22.20.193",
      "104.22.35.158",
      "104.20.79.104",
      "172.65.40.217",
      "172.67.83.112",
      "172.67.193.104",
      "104.20.244.195",
      "172.67.111.76",
      "104.18.7.24",
      "104.16.244.215",
      "104.20.185.226",
      "172.67.51.122"
    ],
    "NORTHWEST": [
      "172.65.238.97",
      "104.17.5.132",
      "104.27.19.243",
      "172.67.31.167",
      "104.19.33.231",
      "104.17.88.86",
      "172.65.241.97",
      "172.66.135.51",
      "104.24.240.251",
      "104.22.11.254",
      "172.66.193.174"
    ],
    "NORTHEAST": [
      "104.18.191.86",
      "104.16.42.248",
      "104.19.104.5",
      "104.18.102.146",
      "104.25.32.84",
      "104.25.192.185",
      "104.25.214.236"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.166.1",
      "104.19.153.134",
      "104.17.37.33",
      "104.16.44.194",
      "104.19.115.47",
      "104.25.220.55",
      "172.67.245.1",
      "172.65.163.83",
      "172.67.5.55"
    ],
    "SOUTH": [
      "104.25.205.77",
      "104.18.216.250",
      "172.65.143.157",
      "104.21.111.148"
    ],
    "NORTH": [
      "104.20.79.104",
      "104.16.233.216",
      "104.24.167.170",
      "104.24.82.86"
    ],
    "CENTRAL": [
      "104.18.89.125",
      "172.66.207.1",
      "172.67.92.128",
      "104.24.48.200",
      "104.16.42.248",
      "172.67.132.144",
      "104.18.1.106",
      "172.65.101.23",
      "172.67.74.255"
    ],
    "SOUTHWEST": [
      "104.17.217.228",
      "104.25.122.251",
      "104.25.57.54",
      "104.17.5.132",
      "104.22.78.16",
      "104.24.49.251",
      "104.24.92.134"
    ],
    "NORTHWEST": [
      "172.65.238.97",
      "172.67.238.28",
      "104.19.8.72",
      "104.18.245.61"
    ],
    "NORTHEAST": [
      "104.16.10.248",
      "104.21.41.206",
      "172.67.171.96",
      "104.18.102.146",
      "172.67.36.108",
      "172.67.138.216",
      "104.16.62.40",
      "104.20.121.33"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}