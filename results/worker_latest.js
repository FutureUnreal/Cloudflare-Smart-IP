// IP池配置 - 更新时间: 2025-01-29T15:36:49.704505
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.19.248.216",
      "172.67.171.109",
      "104.21.118.62",
      "172.67.206.77",
      "104.21.107.238",
      "104.19.225.246",
      "103.21.244.195",
      "172.66.2.229",
      "104.20.230.60",
      "104.25.205.171",
      "104.20.148.77"
    ],
    "SOUTH": [
      "104.21.224.170",
      "172.65.93.1",
      "104.21.197.196",
      "104.17.109.199",
      "104.18.242.1",
      "104.19.91.203",
      "104.17.166.136",
      "104.19.86.191",
      "104.24.69.82",
      "104.19.73.196"
    ],
    "NORTH": [
      "104.19.126.117",
      "172.67.145.178",
      "172.67.222.109",
      "104.17.162.228",
      "104.17.210.194",
      "104.20.18.61",
      "104.20.104.21",
      "104.25.153.25",
      "104.25.171.38",
      "104.20.127.33",
      "104.20.113.161"
    ],
    "CENTRAL": [
      "104.18.56.154",
      "104.17.210.167",
      "104.19.133.98",
      "104.20.211.254",
      "104.26.4.80",
      "104.20.94.104"
    ],
    "SOUTHWEST": [
      "172.65.194.101",
      "104.18.53.105",
      "104.17.79.232",
      "104.17.74.93",
      "104.21.91.176",
      "172.67.240.10",
      "172.65.245.176",
      "104.17.120.180",
      "104.20.144.172",
      "104.20.141.76",
      "104.27.36.246",
      "104.25.149.186",
      "104.24.160.61",
      "104.25.68.90"
    ],
    "NORTHWEST": [
      "104.17.77.109",
      "104.18.128.2",
      "104.18.234.29",
      "104.18.10.18",
      "104.19.204.73",
      "104.19.88.85",
      "104.20.115.141",
      "104.25.53.39",
      "104.20.125.156",
      "172.66.200.119",
      "104.20.205.143"
    ],
    "NORTHEAST": [
      "104.16.163.100",
      "172.67.216.15",
      "104.21.68.208",
      "104.17.217.115",
      "104.18.65.21",
      "104.17.83.47",
      "172.65.242.82",
      "104.20.239.188",
      "104.25.106.107",
      "104.24.94.83",
      "172.65.188.34"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.17.145.24",
      "104.17.89.100",
      "104.24.1.36",
      "104.18.196.65",
      "104.17.79.232",
      "104.20.217.188",
      "104.18.128.2",
      "104.17.104.17",
      "104.19.172.252",
      "104.18.242.1",
      "172.67.240.10",
      "172.65.245.176",
      "104.20.18.61",
      "104.21.15.153",
      "172.67.222.109",
      "104.26.4.80",
      "104.20.230.60",
      "104.27.36.246",
      "104.20.113.161"
    ],
    "SOUTH": [
      "172.65.127.150",
      "104.16.97.94",
      "104.24.83.116",
      "104.17.102.253",
      "104.17.210.167",
      "104.17.77.109",
      "104.21.68.208",
      "104.19.225.246",
      "104.18.10.18",
      "104.25.153.25",
      "104.20.127.33"
    ],
    "NORTH": [
      "104.16.182.131",
      "104.24.189.147",
      "104.27.32.199",
      "104.18.53.105",
      "104.16.167.143",
      "104.20.211.254",
      "104.21.197.196",
      "104.20.104.21",
      "104.21.107.238",
      "104.25.149.186",
      "172.67.145.178"
    ],
    "CENTRAL": [
      "172.67.70.80",
      "104.18.106.72",
      "104.20.126.120",
      "104.24.148.105",
      "104.25.51.138",
      "172.65.164.254",
      "104.25.5.8",
      "104.22.20.232",
      "104.20.148.143",
      "104.25.151.36",
      "104.19.70.225",
      "104.18.234.29",
      "104.19.91.203",
      "103.21.244.195",
      "104.21.3.20",
      "104.20.141.76",
      "104.25.205.171",
      "172.65.188.34",
      "104.19.73.196"
    ],
    "SOUTHWEST": [
      "104.20.193.78",
      "104.22.33.26",
      "104.25.196.235",
      "172.67.127.174",
      "104.24.240.179",
      "104.18.83.191",
      "104.17.210.194",
      "104.21.91.176",
      "172.66.2.229",
      "104.20.115.141",
      "104.20.94.104",
      "104.20.148.77",
      "104.21.106.14"
    ],
    "NORTHWEST": [
      "104.16.163.100",
      "104.25.57.192",
      "104.20.238.101",
      "104.17.74.93",
      "172.67.206.77",
      "104.18.65.21",
      "104.17.83.47",
      "104.20.239.188",
      "104.25.171.38"
    ],
    "NORTHEAST": [
      "104.24.67.46",
      "104.24.95.11",
      "104.21.224.170",
      "104.21.118.62",
      "104.16.219.41",
      "104.17.109.199",
      "104.25.106.107"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.102.253",
      "104.20.193.78",
      "104.18.56.154",
      "104.25.151.36",
      "104.20.126.120",
      "104.20.238.101",
      "172.67.171.109",
      "104.21.76.31"
    ],
    "SOUTH": [
      "172.66.46.180",
      "104.24.148.105",
      "104.19.70.225",
      "104.24.1.36",
      "104.16.97.94",
      "104.21.3.20",
      "104.17.120.180",
      "104.24.94.83"
    ],
    "NORTH": [
      "104.18.106.72",
      "104.25.218.238",
      "172.67.127.174",
      "104.24.67.46",
      "104.19.143.79",
      "104.19.88.85",
      "104.20.125.156",
      "104.25.68.90"
    ],
    "CENTRAL": [
      "104.20.148.143",
      "172.65.93.1",
      "104.18.83.191",
      "104.19.105.185",
      "104.25.57.192",
      "172.65.242.82",
      "172.66.200.119"
    ],
    "SOUTHWEST": [
      "104.24.91.16",
      "104.24.83.116",
      "172.66.1.54",
      "104.20.36.168",
      "104.24.189.147",
      "104.17.89.100",
      "104.17.217.115",
      "172.67.216.15"
    ],
    "NORTHWEST": [
      "104.22.20.232",
      "172.67.70.80",
      "104.24.160.61"
    ],
    "NORTHEAST": [
      "104.17.104.17",
      "104.25.81.184",
      "104.19.172.252",
      "104.24.95.11",
      "172.65.194.101",
      "104.19.86.191"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}