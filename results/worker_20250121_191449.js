// IP池配置 - 更新时间: 2025-01-21T19:14:46.891055
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.19.198.128",
      "104.19.239.141",
      "172.67.129.99",
      "104.25.217.108",
      "104.16.88.4",
      "104.27.48.190",
      "104.20.181.45",
      "172.67.99.57",
      "104.24.57.216"
    ],
    "SOUTH": [
      "104.19.72.16",
      "104.16.252.111",
      "104.17.183.121",
      "104.21.239.208",
      "104.21.70.144",
      "104.25.5.85",
      "104.16.200.114",
      "172.67.93.245",
      "104.25.124.116",
      "104.24.46.182",
      "104.20.176.213"
    ],
    "NORTH": [
      "104.19.44.84",
      "104.19.8.14",
      "172.67.232.20",
      "104.16.164.61",
      "104.18.17.32",
      "104.25.158.205",
      "104.21.54.18",
      "104.27.76.71",
      "104.20.218.96",
      "104.25.214.146"
    ],
    "CENTRAL": [
      "104.19.218.222",
      "104.16.76.202",
      "104.21.216.237",
      "172.67.137.70",
      "104.17.29.251",
      "104.25.250.48",
      "104.18.187.93",
      "104.27.64.146",
      "104.25.171.197",
      "104.20.204.27"
    ],
    "SOUTHWEST": [
      "104.18.100.90",
      "104.18.46.117",
      "104.16.19.125",
      "104.17.59.91",
      "104.17.116.187",
      "104.19.22.123",
      "104.18.17.21",
      "104.17.110.224",
      "172.67.63.202",
      "104.24.6.66",
      "172.65.180.129",
      "104.24.143.132",
      "172.65.115.60",
      "172.66.165.155",
      "172.67.99.6"
    ],
    "NORTHWEST": [
      "104.17.210.143",
      "172.65.7.105",
      "104.19.12.79",
      "172.67.185.125",
      "172.67.111.207",
      "104.25.31.43"
    ],
    "NORTHEAST": [
      "172.67.166.87",
      "172.65.208.5",
      "104.16.88.215",
      "104.19.4.178",
      "104.16.17.98",
      "172.67.20.222",
      "104.25.173.2",
      "104.24.158.3",
      "104.25.215.170",
      "104.24.92.179",
      "104.27.81.224"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "172.67.61.244",
      "104.25.41.244",
      "104.17.243.16",
      "104.25.249.62",
      "172.65.224.72",
      "104.21.54.18",
      "104.19.22.123",
      "104.24.221.17",
      "104.18.187.93",
      "104.25.124.116",
      "104.24.57.216"
    ],
    "SOUTH": [
      "172.67.76.15",
      "104.20.75.36",
      "104.21.54.6",
      "104.17.183.121",
      "172.65.225.181",
      "104.21.70.144",
      "104.17.29.251",
      "104.27.64.146",
      "104.20.204.27"
    ],
    "NORTH": [
      "104.16.195.96",
      "104.17.74.74",
      "104.20.201.73",
      "172.67.101.158",
      "104.27.85.10",
      "104.25.206.191",
      "104.24.20.149",
      "104.25.173.117",
      "172.67.20.222",
      "172.67.202.106",
      "104.25.215.170"
    ],
    "CENTRAL": [
      "104.19.209.145",
      "104.21.210.11",
      "104.18.208.31",
      "104.16.59.251",
      "172.65.231.94",
      "104.21.115.20",
      "104.17.59.91",
      "104.24.20.197",
      "172.67.23.73",
      "104.18.17.32",
      "104.18.17.21",
      "104.18.175.118",
      "104.24.143.132",
      "104.25.214.146",
      "104.25.31.43"
    ],
    "SOUTHWEST": [
      "104.20.29.15",
      "172.65.208.5",
      "104.19.12.79",
      "104.25.61.100",
      "104.16.19.125",
      "104.18.100.90",
      "104.18.103.115",
      "104.24.10.74",
      "104.17.210.143",
      "104.18.142.170",
      "104.16.200.114",
      "172.67.93.245",
      "104.24.92.179",
      "104.27.76.71"
    ],
    "NORTHWEST": [
      "104.16.88.215",
      "104.16.17.98",
      "104.25.217.108",
      "104.19.218.222",
      "104.18.46.117",
      "104.19.4.178",
      "104.25.158.205",
      "104.22.36.14",
      "172.67.137.70",
      "104.27.48.190",
      "104.20.181.45",
      "172.67.99.6"
    ],
    "NORTHEAST": [
      "104.20.90.49",
      "172.65.207.230",
      "104.24.6.66",
      "104.19.198.128"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.25.249.62",
      "104.17.110.224",
      "104.21.54.6",
      "104.20.88.207",
      "104.18.206.72",
      "104.18.103.115",
      "104.27.85.10",
      "104.19.239.141"
    ],
    "SOUTH": [
      "104.18.145.154",
      "104.16.254.219",
      "104.16.195.96",
      "104.20.64.251",
      "172.67.112.84",
      "104.21.236.201",
      "172.67.76.15",
      "104.20.90.49",
      "104.24.242.90"
    ],
    "NORTH": [
      "172.67.232.20",
      "104.20.201.73",
      "104.20.29.15",
      "172.65.7.105",
      "104.24.62.237",
      "172.67.49.133",
      "104.27.51.98",
      "172.65.87.100",
      "172.65.232.41",
      "104.18.142.170",
      "104.27.81.224"
    ],
    "CENTRAL": [
      "172.65.91.84",
      "104.21.230.142",
      "104.21.216.237",
      "104.25.41.244",
      "104.25.161.175",
      "104.22.36.14",
      "104.25.173.2",
      "172.67.99.57"
    ],
    "SOUTHWEST": [
      "104.20.75.36",
      "104.25.192.106",
      "172.65.224.72",
      "172.65.231.94",
      "172.67.63.202",
      "104.25.171.197"
    ],
    "NORTHWEST": [
      "104.17.243.16",
      "104.25.61.100",
      "172.66.136.188",
      "172.67.129.99"
    ],
    "NORTHEAST": [
      "104.17.116.187",
      "104.21.239.208",
      "172.67.166.87",
      "104.18.208.31",
      "172.67.61.244",
      "104.16.76.202",
      "104.25.5.85",
      "172.65.180.129",
      "172.67.202.106",
      "104.25.250.48",
      "172.66.165.155",
      "104.24.158.3"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}