// IP池配置 - 更新时间: 2024-11-29T17:31:40.155739
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.16.128.243",
      "172.67.131.234",
      "104.19.119.219",
      "172.67.89.86",
      "104.20.71.170",
      "104.25.17.149",
      "104.24.28.66",
      "104.24.179.160",
      "104.20.120.2",
      "172.66.156.185",
      "104.27.23.250",
      "104.17.222.176",
      "104.18.54.253"
    ],
    "SOUTH": [
      "104.18.33.81",
      "104.19.97.210",
      "104.19.39.98",
      "104.22.28.236",
      "104.19.110.53",
      "172.65.33.70",
      "104.21.2.97",
      "172.66.145.242",
      "104.24.95.111",
      "104.27.31.159",
      "104.25.115.171",
      "104.25.173.58",
      "172.66.212.114",
      "104.20.90.163",
      "104.25.63.123",
      "104.20.151.102",
      "104.20.232.198",
      "104.18.183.62",
      "104.22.18.139",
      "104.16.29.169"
    ],
    "NORTH": [
      "172.67.133.243",
      "172.67.131.43",
      "104.17.170.119",
      "172.67.151.240",
      "172.65.43.92",
      "104.19.23.176",
      "104.22.23.252",
      "104.19.69.41",
      "104.25.29.156",
      "172.65.237.86",
      "104.20.141.141",
      "104.20.82.217",
      "104.27.23.11",
      "172.66.192.192",
      "104.24.36.92",
      "104.25.120.41",
      "104.24.88.9",
      "104.24.201.134",
      "104.20.244.89",
      "104.25.111.150"
    ],
    "CENTRAL": [
      "104.21.34.156",
      "172.67.163.79",
      "172.67.25.226",
      "172.67.213.176",
      "104.20.185.60",
      "104.20.75.160",
      "172.66.213.233",
      "104.20.110.77",
      "104.22.42.213",
      "104.20.22.111",
      "104.20.83.39",
      "104.20.143.95",
      "104.24.235.164",
      "104.17.45.64",
      "104.17.169.155",
      "104.19.186.58",
      "104.18.7.123",
      "104.16.14.46",
      "104.17.251.156",
      "104.18.39.69"
    ],
    "SOUTHWEST": [
      "172.67.232.28",
      "104.18.21.166",
      "172.67.227.122",
      "104.21.18.13",
      "104.21.192.212",
      "104.25.203.121",
      "104.20.221.152",
      "104.24.222.136",
      "104.19.202.199",
      "104.27.26.198",
      "104.24.160.142",
      "104.24.51.121",
      "104.20.253.190",
      "172.67.106.178",
      "104.25.17.223",
      "104.24.51.39",
      "104.25.7.204",
      "172.66.210.21",
      "104.25.245.2",
      "104.16.93.62"
    ],
    "NORTHWEST": [
      "172.67.180.162",
      "104.21.212.40",
      "172.67.151.239",
      "104.21.84.185",
      "104.17.12.234",
      "172.66.1.105",
      "172.65.130.46",
      "172.66.203.105",
      "104.27.109.7",
      "104.25.49.85",
      "172.65.96.228",
      "104.24.50.121",
      "172.65.113.144",
      "104.25.3.110",
      "104.19.210.207",
      "104.22.21.178"
    ],
    "NORTHEAST": [
      "104.19.73.165",
      "104.21.22.188",
      "104.18.135.17",
      "172.65.9.147",
      "172.67.249.70",
      "104.18.36.174",
      "104.21.227.123",
      "172.65.182.167",
      "172.66.205.55",
      "104.20.125.225",
      "104.20.152.77",
      "104.24.4.14",
      "104.25.131.178",
      "104.27.57.169",
      "104.25.233.27",
      "104.25.231.177",
      "104.24.193.18",
      "104.19.177.127",
      "104.16.61.179",
      "104.17.48.106"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.20.22.128",
      "172.67.69.141",
      "104.17.77.158",
      "104.19.119.219",
      "104.24.28.66",
      "172.65.43.92",
      "104.20.202.39",
      "104.25.173.58",
      "104.20.82.217",
      "104.21.227.123",
      "172.65.130.46",
      "104.24.88.9",
      "104.20.151.102",
      "104.25.111.150",
      "172.66.210.21",
      "104.24.179.160",
      "104.24.50.121",
      "104.25.231.177"
    ],
    "SOUTH": [
      "104.18.197.48",
      "172.65.9.147",
      "172.67.133.243",
      "104.25.89.17",
      "172.67.25.226",
      "104.20.110.77",
      "104.25.29.156",
      "104.27.31.159",
      "104.20.152.77",
      "104.20.185.60",
      "104.21.18.13",
      "104.24.160.142",
      "172.66.156.185",
      "104.19.97.210",
      "104.25.131.178",
      "104.20.253.190",
      "104.20.244.89",
      "104.22.42.213",
      "172.66.145.242",
      "104.18.183.62"
    ],
    "NORTH": [
      "104.19.73.165",
      "104.18.21.166",
      "104.19.193.114",
      "104.20.22.111",
      "104.27.23.11",
      "172.66.205.55",
      "172.66.192.192",
      "104.25.63.123",
      "104.24.95.111",
      "104.24.201.134",
      "104.20.232.198",
      "172.67.106.178",
      "104.25.203.121",
      "172.65.96.228",
      "104.17.170.119",
      "104.25.3.110",
      "104.27.198.252",
      "104.16.61.179",
      "104.16.14.46",
      "104.18.7.123"
    ],
    "CENTRAL": [
      "104.21.34.156",
      "104.18.36.174",
      "104.16.222.227",
      "104.27.1.248",
      "104.24.88.123",
      "104.20.90.163",
      "104.24.222.136",
      "104.27.109.7",
      "104.25.7.204",
      "104.24.235.164",
      "104.27.57.169",
      "104.19.39.98",
      "104.18.33.81",
      "104.20.149.168",
      "104.19.210.207",
      "172.67.151.240",
      "104.17.90.123",
      "104.17.56.74",
      "104.21.192.212"
    ],
    "SOUTHWEST": [
      "104.24.40.188",
      "104.20.45.255",
      "104.24.59.79",
      "172.65.237.86",
      "104.19.23.176",
      "104.18.84.181",
      "104.16.128.243",
      "172.66.1.105",
      "104.25.17.149",
      "104.20.221.152",
      "104.17.162.104",
      "104.27.23.250",
      "104.24.51.39",
      "104.25.17.223",
      "172.67.213.176",
      "172.65.234.207",
      "104.21.22.188",
      "104.16.143.72",
      "104.17.209.20",
      "104.22.21.178"
    ],
    "NORTHWEST": [
      "104.16.220.192",
      "104.19.69.41",
      "104.24.20.93",
      "172.65.220.96",
      "172.66.148.150",
      "104.19.7.70",
      "104.24.4.14",
      "104.20.125.225",
      "104.25.120.41",
      "104.19.110.53",
      "104.24.36.92",
      "104.25.245.2",
      "104.16.222.239",
      "172.65.113.144",
      "172.66.213.233",
      "172.66.212.114",
      "104.25.233.27",
      "104.19.186.58",
      "104.19.162.189",
      "104.18.190.149"
    ],
    "NORTHEAST": [
      "172.67.151.239",
      "104.21.212.40",
      "172.67.131.43",
      "172.66.203.105",
      "172.65.182.167",
      "104.16.29.169",
      "104.16.93.62",
      "104.18.0.189",
      "104.17.167.138",
      "104.18.39.69"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.18.197.48",
      "104.24.88.123",
      "104.25.49.85",
      "104.21.84.185",
      "104.16.250.87"
    ],
    "SOUTH": [
      "104.22.28.236",
      "104.24.40.188",
      "104.18.135.17",
      "104.20.75.160",
      "104.17.162.104",
      "104.20.141.141",
      "104.25.115.171",
      "104.20.83.39"
    ],
    "NORTH": [
      "172.67.69.141",
      "104.25.93.131",
      "104.22.23.252",
      "172.67.89.86",
      "104.19.193.114",
      "104.20.143.95",
      "104.16.222.239",
      "104.21.1.58"
    ],
    "CENTRAL": [
      "104.18.84.181",
      "104.17.12.234",
      "104.16.222.227",
      "172.67.227.122",
      "172.66.148.150",
      "172.65.220.96",
      "104.20.152.217",
      "104.27.198.252"
    ],
    "SOUTHWEST": [
      "104.19.191.187",
      "104.27.1.248",
      "104.18.149.154"
    ],
    "NORTHWEST": [
      "104.17.77.158",
      "104.16.220.192",
      "104.20.202.39",
      "104.21.35.216"
    ],
    "NORTHEAST": [
      "172.67.77.54",
      "104.20.120.2",
      "104.19.7.70",
      "104.27.26.198",
      "104.19.202.199"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}