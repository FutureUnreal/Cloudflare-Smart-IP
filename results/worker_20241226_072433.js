// IP池配置 - 更新时间: 2024-12-26T07:24:32.294561
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.19.28.84",
      "104.16.147.224",
      "104.21.123.245",
      "172.65.6.114",
      "104.21.223.181",
      "104.19.87.157",
      "172.67.198.187",
      "104.21.75.16",
      "172.65.8.3",
      "172.65.124.64",
      "104.24.165.2",
      "104.24.19.43",
      "104.25.132.125",
      "104.24.249.232",
      "172.65.102.112",
      "172.66.138.22",
      "104.24.2.214"
    ],
    "SOUTH": [
      "104.17.238.238",
      "104.18.107.115",
      "172.67.241.193",
      "104.25.70.221",
      "104.27.96.183",
      "172.66.210.252",
      "104.25.71.21",
      "172.67.70.106",
      "172.67.60.93",
      "104.25.70.249",
      "104.24.12.229"
    ],
    "NORTH": [
      "104.16.180.58",
      "104.18.203.104",
      "172.65.248.97",
      "104.19.227.175",
      "104.16.139.174",
      "104.21.10.112",
      "104.17.221.123",
      "104.24.198.24",
      "104.27.69.3"
    ],
    "CENTRAL": [
      "104.17.93.161",
      "104.18.142.187",
      "104.18.4.219",
      "172.67.26.214",
      "104.16.92.248",
      "104.18.23.138",
      "104.24.208.206",
      "104.22.2.129",
      "104.20.188.32",
      "104.20.158.169",
      "172.66.137.176",
      "104.25.111.52",
      "104.20.198.175",
      "104.27.41.17"
    ],
    "SOUTHWEST": [
      "104.16.99.110",
      "104.16.66.186",
      "172.67.137.152",
      "104.18.91.146",
      "172.66.146.80",
      "104.25.108.150",
      "104.20.114.70",
      "104.22.42.183",
      "104.25.233.43"
    ],
    "NORTHWEST": [
      "172.67.134.186",
      "104.16.239.157",
      "172.65.203.232"
    ],
    "NORTHEAST": [
      "104.17.32.95",
      "104.17.209.31",
      "172.65.230.186",
      "104.16.159.254",
      "104.19.54.133",
      "104.16.116.222",
      "104.21.233.40",
      "104.19.128.239",
      "104.25.39.16",
      "104.20.207.51",
      "104.25.3.141",
      "104.24.70.168",
      "104.24.88.179"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.16.76.130",
      "104.16.116.222",
      "104.25.46.115",
      "104.20.114.93",
      "104.17.126.12",
      "104.24.186.175",
      "104.25.108.150",
      "104.22.2.129",
      "104.20.188.32",
      "104.25.132.125",
      "104.20.158.169",
      "104.24.2.214"
    ],
    "SOUTH": [
      "172.67.209.52",
      "104.18.242.72",
      "172.67.28.246",
      "104.25.106.131",
      "104.19.128.239",
      "104.16.123.189",
      "172.65.124.64",
      "172.67.141.114",
      "172.65.6.114",
      "104.22.42.183",
      "172.67.60.93",
      "104.27.41.17",
      "104.24.88.179"
    ],
    "NORTH": [
      "104.17.32.95",
      "104.19.28.84",
      "172.65.248.97",
      "172.67.92.17",
      "104.17.85.58",
      "172.65.135.106",
      "104.18.107.115",
      "104.27.96.183",
      "172.66.210.252",
      "104.20.198.175",
      "104.24.70.168"
    ],
    "CENTRAL": [
      "104.16.180.58",
      "104.18.4.219",
      "104.22.71.199",
      "104.21.235.90",
      "104.17.93.161",
      "104.21.234.201",
      "188.114.97.65",
      "104.16.147.224",
      "104.16.99.110",
      "172.67.11.83",
      "104.25.70.249"
    ],
    "SOUTHWEST": [
      "104.20.92.246",
      "104.20.3.120",
      "104.16.139.174",
      "104.18.203.104",
      "172.67.96.165",
      "104.18.176.101",
      "104.17.145.168",
      "104.19.54.133",
      "104.21.91.23",
      "172.67.198.187",
      "172.67.241.193",
      "104.24.19.43",
      "104.25.71.21",
      "104.25.3.141",
      "172.66.138.22"
    ],
    "NORTHWEST": [
      "104.25.76.221",
      "104.21.223.181",
      "104.16.156.161",
      "104.19.87.157",
      "172.65.203.232",
      "104.17.209.31",
      "104.19.249.175",
      "104.20.137.141",
      "104.16.92.248",
      "104.25.39.16",
      "104.27.69.3",
      "104.20.207.51"
    ],
    "NORTHEAST": [
      "104.21.25.35",
      "104.20.125.209",
      "104.20.214.99",
      "172.65.158.90",
      "172.65.93.87",
      "104.17.238.238",
      "104.17.25.66",
      "172.65.8.3",
      "104.24.198.24"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "172.65.15.34",
      "104.20.3.120",
      "172.67.28.246",
      "172.65.230.186",
      "104.17.25.66",
      "172.65.222.219",
      "172.65.102.112"
    ],
    "SOUTH": [
      "104.17.153.183",
      "104.18.36.5",
      "104.21.123.245",
      "104.19.249.175",
      "172.67.137.152",
      "172.67.141.114",
      "104.25.233.43",
      "104.24.12.229"
    ],
    "NORTH": [
      "104.25.76.221",
      "172.67.92.17",
      "104.20.92.246",
      "104.21.25.35",
      "104.20.91.65",
      "104.21.234.201",
      "104.18.23.138",
      "172.67.184.178",
      "104.21.64.125",
      "172.66.146.80",
      "104.24.249.232"
    ],
    "CENTRAL": [
      "104.17.221.123",
      "104.16.159.254",
      "172.65.200.89",
      "104.27.9.194",
      "104.25.220.124",
      "104.18.242.72",
      "188.114.97.65",
      "104.20.137.141",
      "104.25.111.52"
    ],
    "SOUTHWEST": [
      "172.65.8.179",
      "172.67.96.165",
      "104.16.66.186",
      "104.21.75.16"
    ],
    "NORTHWEST": [
      "104.21.235.90",
      "104.21.10.112",
      "104.17.85.58",
      "172.65.93.87",
      "104.21.84.190",
      "104.25.183.26",
      "172.67.134.186"
    ],
    "NORTHEAST": [
      "104.16.76.130",
      "104.20.114.93",
      "104.16.239.157",
      "172.66.215.121",
      "104.16.123.189",
      "104.20.125.209",
      "104.16.218.183",
      "172.65.158.90",
      "104.25.70.221"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}