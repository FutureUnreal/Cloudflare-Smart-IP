// IP池配置 - 更新时间: 2025-01-14T07:13:56.857183
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "172.67.200.227",
      "172.67.177.107",
      "104.20.99.131",
      "104.19.89.123",
      "104.17.144.150",
      "104.25.210.47",
      "104.25.250.254",
      "172.67.54.103"
    ],
    "SOUTH": [
      "104.18.119.142",
      "172.67.26.253",
      "172.67.197.88",
      "104.25.33.131",
      "104.19.187.133",
      "104.25.168.255",
      "104.24.91.146",
      "104.20.93.36"
    ],
    "NORTH": [
      "172.65.8.137",
      "172.67.180.33",
      "104.17.89.151",
      "104.17.179.235",
      "104.25.210.144",
      "104.17.27.87",
      "104.20.29.114",
      "104.24.153.124",
      "104.24.232.100",
      "104.19.54.129"
    ],
    "CENTRAL": [
      "172.67.29.72",
      "104.21.37.217",
      "172.67.146.11",
      "104.21.74.226",
      "104.27.76.143",
      "104.18.97.171",
      "104.20.86.58",
      "104.25.84.251",
      "104.20.129.219",
      "104.24.29.190",
      "104.19.80.243"
    ],
    "SOUTHWEST": [
      "104.17.142.66",
      "104.25.96.249",
      "104.20.234.180",
      "172.65.207.79",
      "104.25.231.188",
      "104.25.141.219",
      "104.25.247.86",
      "104.24.141.203"
    ],
    "NORTHWEST": [
      "172.67.192.237",
      "172.65.6.88",
      "104.16.122.75",
      "104.27.197.73",
      "104.19.93.217",
      "104.20.222.124",
      "104.25.220.187",
      "104.19.96.82",
      "104.27.28.246",
      "104.24.79.217"
    ],
    "NORTHEAST": [
      "172.67.194.104",
      "172.67.225.224",
      "104.18.30.93",
      "104.16.45.197",
      "104.22.28.119",
      "104.24.81.150",
      "104.19.110.156",
      "104.18.86.153",
      "104.18.241.22",
      "104.17.240.127",
      "104.19.110.134",
      "104.16.27.117",
      "172.65.117.235",
      "172.67.110.230",
      "104.20.163.20",
      "104.20.0.159",
      "104.22.12.244"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.24.137.235",
      "172.67.208.169",
      "104.27.197.73",
      "104.25.210.144",
      "104.25.231.188",
      "104.25.141.219",
      "104.25.250.254",
      "104.20.0.159"
    ],
    "SOUTH": [
      "104.25.182.88",
      "172.65.8.137",
      "172.65.176.117",
      "104.19.242.251",
      "104.19.174.20",
      "172.67.70.89",
      "104.20.99.131",
      "172.65.244.70",
      "172.67.200.227",
      "172.65.162.19",
      "104.25.33.131",
      "104.24.29.190"
    ],
    "NORTH": [
      "104.20.18.8",
      "104.18.165.37",
      "104.18.119.142",
      "104.19.48.66",
      "104.16.72.3",
      "104.24.57.131",
      "104.20.152.226",
      "172.65.63.242",
      "172.65.138.22",
      "104.17.174.195",
      "172.67.197.88",
      "104.21.74.226",
      "104.25.51.207",
      "104.18.97.171",
      "104.25.210.47",
      "104.20.93.36",
      "104.20.163.20"
    ],
    "CENTRAL": [
      "172.67.180.33",
      "172.65.53.222",
      "104.25.18.23",
      "172.65.70.42",
      "104.21.15.177",
      "172.67.194.104",
      "104.24.245.250",
      "172.67.235.112",
      "104.21.73.114",
      "104.16.169.49",
      "172.67.146.11",
      "104.18.86.153",
      "104.25.247.86",
      "104.19.54.129"
    ],
    "SOUTHWEST": [
      "104.20.127.197",
      "104.27.125.224",
      "172.65.81.197",
      "104.17.142.66",
      "104.16.122.75",
      "172.65.221.81",
      "104.18.30.93",
      "104.25.220.187",
      "104.19.96.82",
      "104.22.12.244"
    ],
    "NORTHWEST": [
      "104.20.234.112",
      "104.24.239.71",
      "104.20.209.199",
      "172.65.6.88",
      "104.25.89.108",
      "104.27.76.143",
      "104.17.144.150",
      "104.17.89.151",
      "104.17.240.127",
      "104.25.168.255",
      "172.67.110.230",
      "104.19.93.217",
      "104.24.153.124"
    ],
    "NORTHEAST": [
      "172.67.26.253",
      "104.21.115.29",
      "172.67.30.164",
      "104.16.23.31",
      "104.20.6.71",
      "104.18.18.122",
      "104.24.81.150",
      "104.19.80.243"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.16.12.136",
      "104.20.81.40",
      "172.65.221.81",
      "104.19.187.133",
      "104.24.91.146"
    ],
    "SOUTH": [
      "104.18.172.245",
      "172.67.70.178",
      "172.67.177.107",
      "172.67.235.112",
      "172.67.101.149",
      "104.19.110.156",
      "104.20.222.124"
    ],
    "NORTH": [
      "104.18.165.37",
      "172.65.176.117",
      "104.19.48.66",
      "104.16.59.100",
      "104.25.182.88",
      "104.17.174.195",
      "104.16.45.197",
      "104.24.245.250",
      "172.65.81.197",
      "104.22.68.55",
      "172.67.192.237",
      "104.16.72.3",
      "104.20.209.155",
      "104.16.23.31",
      "104.17.27.87",
      "172.67.54.103"
    ],
    "CENTRAL": [
      "104.19.174.20",
      "104.27.5.9",
      "104.27.195.234",
      "104.20.127.197",
      "104.20.6.71",
      "172.65.117.235"
    ],
    "SOUTHWEST": [
      "172.67.29.72",
      "104.25.113.121",
      "104.20.234.112",
      "104.25.18.85",
      "172.65.76.229",
      "172.67.208.169",
      "172.65.244.70",
      "104.16.169.49",
      "104.21.82.27",
      "104.20.234.180",
      "104.19.89.123",
      "104.27.28.246"
    ],
    "NORTHWEST": [
      "172.65.63.242",
      "104.18.241.22",
      "104.16.27.117"
    ],
    "NORTHEAST": [
      "104.16.246.25",
      "104.21.15.177",
      "104.21.37.217",
      "104.19.242.251",
      "104.21.73.114",
      "104.17.179.235",
      "104.25.84.251"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}