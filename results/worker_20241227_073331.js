// IP池配置 - 更新时间: 2024-12-27T07:33:29.445636
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.17.155.143",
      "104.18.8.63",
      "104.17.188.81",
      "104.18.15.203",
      "104.21.228.188",
      "172.65.232.106",
      "104.21.235.238",
      "172.67.205.33",
      "172.67.205.247",
      "104.17.192.45",
      "104.21.54.67",
      "172.66.155.74",
      "104.25.116.68",
      "172.67.89.103",
      "104.25.204.62",
      "104.24.189.230",
      "172.65.101.145",
      "104.27.56.200",
      "104.24.136.112"
    ],
    "SOUTH": [
      "104.17.140.11",
      "104.19.251.30",
      "104.21.16.57",
      "104.21.92.67",
      "104.17.240.16",
      "104.27.75.120",
      "104.24.230.212",
      "172.66.146.98",
      "172.67.93.20",
      "104.24.217.100",
      "104.25.114.223",
      "104.22.0.106",
      "104.27.78.129"
    ],
    "NORTH": [
      "172.65.55.147",
      "104.21.91.101",
      "172.67.42.230",
      "104.22.60.198",
      "104.16.117.234",
      "104.24.77.50",
      "104.27.193.115",
      "172.65.109.40",
      "104.25.1.205",
      "104.20.172.46",
      "172.65.69.188",
      "172.66.144.67",
      "104.27.116.208",
      "104.25.141.68"
    ],
    "CENTRAL": [
      "104.16.75.137",
      "104.18.181.10",
      "104.18.177.132",
      "104.18.50.143",
      "104.16.73.99",
      "172.66.142.240",
      "104.20.65.103",
      "104.25.57.79"
    ],
    "SOUTHWEST": [
      "104.19.51.82",
      "172.65.83.201",
      "104.19.221.198",
      "104.16.182.153",
      "104.17.119.26",
      "104.19.42.202",
      "172.67.39.130",
      "104.25.143.142",
      "104.27.115.158"
    ],
    "NORTHWEST": [
      "104.18.32.251",
      "172.65.134.12",
      "104.24.49.133",
      "104.20.102.68"
    ],
    "NORTHEAST": [
      "172.65.42.93",
      "172.65.20.197",
      "104.16.101.182",
      "104.19.204.134",
      "104.19.95.57",
      "104.22.44.43",
      "104.24.132.221",
      "104.25.99.174",
      "172.66.175.132"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.17.105.217",
      "172.67.252.65",
      "104.17.214.100",
      "104.19.172.42",
      "172.65.101.28",
      "104.19.207.227",
      "104.19.221.198",
      "104.21.25.232",
      "104.16.67.7",
      "104.18.32.251",
      "104.27.193.115",
      "104.25.1.205",
      "172.65.69.188",
      "104.27.116.208",
      "104.25.141.68",
      "104.25.114.223",
      "172.66.175.132",
      "104.27.56.200"
    ],
    "SOUTH": [
      "104.18.8.63",
      "104.25.199.241",
      "172.65.244.2",
      "104.18.192.248",
      "104.17.140.11",
      "104.17.19.224",
      "104.17.74.96",
      "172.65.232.106",
      "104.17.240.16",
      "104.20.65.103",
      "104.25.116.68",
      "104.24.189.230",
      "104.24.217.100"
    ],
    "NORTH": [
      "104.16.75.137",
      "104.17.188.81",
      "104.18.181.10",
      "104.24.17.54",
      "104.17.51.101",
      "104.19.51.82",
      "104.25.9.62",
      "104.21.3.225",
      "104.16.101.182",
      "172.66.192.33",
      "104.24.49.133",
      "104.22.44.43",
      "104.25.57.79",
      "104.22.0.106",
      "104.20.102.68"
    ],
    "CENTRAL": [
      "104.24.83.44",
      "104.18.15.203",
      "104.19.65.153",
      "104.16.117.234",
      "104.16.66.19",
      "104.21.92.67",
      "172.67.42.230",
      "104.25.143.142",
      "172.65.134.12",
      "104.24.230.212",
      "172.66.142.240",
      "104.27.78.129"
    ],
    "SOUTHWEST": [
      "104.18.76.30",
      "104.17.155.143",
      "104.20.4.86",
      "104.18.196.107",
      "104.17.131.17",
      "104.18.92.239",
      "104.16.151.219"
    ],
    "NORTHWEST": [
      "172.67.166.39",
      "104.20.254.157",
      "104.16.225.34",
      "104.21.198.184",
      "104.18.88.150",
      "104.24.77.50",
      "172.65.20.197"
    ],
    "NORTHEAST": [
      "172.67.205.247",
      "104.25.89.187",
      "104.18.20.198",
      "172.65.103.110",
      "104.19.42.202"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.214.100",
      "104.18.177.132",
      "104.19.204.134",
      "104.18.182.146",
      "104.19.193.120",
      "104.18.41.109",
      "104.21.25.232",
      "104.17.131.17"
    ],
    "SOUTH": [
      "172.65.42.93",
      "104.24.87.168",
      "172.67.80.87",
      "104.18.20.198",
      "104.17.78.223",
      "172.65.234.126",
      "104.19.95.57",
      "104.21.54.67",
      "172.65.109.40",
      "104.20.172.46"
    ],
    "NORTH": [
      "104.21.91.101",
      "104.17.192.45",
      "172.65.101.28",
      "172.65.83.201",
      "172.67.205.33",
      "172.67.39.130",
      "104.25.204.62",
      "104.27.115.158"
    ],
    "CENTRAL": [
      "104.21.235.238",
      "104.17.51.101",
      "172.67.166.39",
      "104.19.251.30",
      "104.22.60.198",
      "104.21.198.184",
      "104.27.28.124",
      "104.19.65.153",
      "104.21.16.57"
    ],
    "SOUTHWEST": [
      "104.17.25.138",
      "104.17.118.89",
      "172.65.55.147",
      "104.18.50.143",
      "104.19.194.124",
      "104.25.89.187",
      "104.18.173.133",
      "104.25.99.174"
    ],
    "NORTHWEST": [
      "104.17.119.26",
      "104.25.199.241",
      "104.19.21.239",
      "104.24.132.221"
    ],
    "NORTHEAST": [
      "104.17.105.217",
      "104.17.115.222",
      "104.18.192.248",
      "172.65.244.2",
      "104.20.128.72",
      "104.21.3.225",
      "104.27.75.120"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}