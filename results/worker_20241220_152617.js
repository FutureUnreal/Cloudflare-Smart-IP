// IP池配置 - 更新时间: 2024-12-20T15:26:16.057902
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.18.176.30",
      "172.67.192.172",
      "104.21.219.130",
      "104.20.151.76",
      "104.17.41.0",
      "104.17.31.47",
      "104.25.46.228",
      "104.16.175.138",
      "104.24.77.250",
      "104.20.160.227",
      "104.27.63.247"
    ],
    "SOUTH": [
      "104.17.9.73",
      "104.17.223.18",
      "172.65.192.150",
      "104.18.109.76",
      "104.19.251.33",
      "104.17.134.149",
      "172.67.244.127",
      "104.24.3.115",
      "104.20.80.195",
      "104.21.239.12"
    ],
    "NORTH": [
      "172.65.50.89",
      "104.19.84.94",
      "104.18.254.192",
      "104.20.167.85",
      "172.66.161.206"
    ],
    "CENTRAL": [
      "104.19.200.102",
      "104.22.62.235",
      "104.17.80.236",
      "104.21.47.45",
      "104.21.26.244",
      "104.24.180.92",
      "104.20.165.244",
      "104.20.81.31",
      "104.20.20.175",
      "104.24.63.84",
      "104.25.84.151",
      "104.26.2.15"
    ],
    "SOUTHWEST": [
      "104.16.247.18",
      "104.17.118.84",
      "104.19.23.117",
      "104.19.81.11",
      "172.67.176.1",
      "172.67.178.241",
      "172.67.130.185",
      "172.67.151.26",
      "172.65.34.203",
      "104.25.64.68",
      "104.16.205.17",
      "104.24.26.130",
      "104.17.229.125",
      "104.17.177.106",
      "104.27.78.15",
      "104.27.98.245",
      "172.65.170.26",
      "104.25.206.14",
      "104.24.83.203"
    ],
    "NORTHWEST": [
      "172.67.245.38",
      "104.21.45.1",
      "104.18.187.3",
      "104.17.45.101",
      "172.67.193.17",
      "104.18.208.226",
      "104.19.143.183",
      "172.65.230.157",
      "104.25.196.180"
    ],
    "NORTHEAST": [
      "172.67.199.54",
      "104.16.25.26",
      "104.17.11.111",
      "104.18.106.202",
      "104.27.39.19",
      "104.18.180.71",
      "104.20.202.91",
      "172.65.145.211",
      "104.20.98.225",
      "172.67.48.43"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.20.57.84",
      "104.21.219.130",
      "104.24.217.219",
      "104.18.176.30",
      "104.24.224.49",
      "172.67.151.26",
      "104.17.191.10",
      "104.18.187.3",
      "104.19.211.84",
      "172.66.204.117",
      "104.24.26.130",
      "104.18.254.192",
      "172.67.193.17",
      "104.27.98.245"
    ],
    "SOUTH": [
      "172.67.225.103",
      "104.25.169.141",
      "104.20.253.196",
      "104.24.9.89",
      "104.19.251.33",
      "104.16.93.219",
      "104.16.17.91",
      "104.20.203.19",
      "172.66.214.106",
      "104.16.210.43",
      "104.17.134.149",
      "104.19.59.235",
      "104.18.214.128",
      "104.16.175.138",
      "104.16.205.17",
      "172.67.158.220",
      "172.67.48.43"
    ],
    "NORTH": [
      "104.20.35.93",
      "104.20.119.8",
      "172.65.254.184",
      "104.17.86.209",
      "104.19.72.155",
      "104.20.167.85",
      "104.24.3.115",
      "104.20.98.225",
      "172.65.145.211"
    ],
    "CENTRAL": [
      "104.22.58.28",
      "172.65.192.150",
      "172.67.52.200",
      "104.21.47.45",
      "172.67.40.44",
      "104.20.26.9",
      "104.25.64.68",
      "104.25.11.1",
      "104.26.2.15"
    ],
    "SOUTHWEST": [
      "104.17.26.166",
      "104.25.60.185",
      "172.67.245.38",
      "104.18.218.218",
      "104.24.128.188",
      "104.22.48.39",
      "104.21.45.205",
      "172.67.244.127",
      "172.67.178.241",
      "104.17.229.209",
      "104.16.25.26",
      "104.18.208.226",
      "104.24.63.84",
      "172.67.175.176",
      "104.24.83.203"
    ],
    "NORTHWEST": [
      "172.65.230.252",
      "104.19.123.231",
      "104.18.211.135",
      "104.18.217.138",
      "104.20.37.30",
      "104.24.233.93",
      "104.17.184.129",
      "104.24.3.84",
      "104.20.165.244",
      "104.20.81.31",
      "172.65.127.170",
      "104.22.31.249",
      "104.18.106.202",
      "172.67.192.172",
      "104.27.78.15"
    ],
    "NORTHEAST": [
      "104.24.90.70",
      "104.17.31.47",
      "104.21.207.131",
      "172.65.48.143"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.223.18",
      "172.67.225.103",
      "104.16.228.142",
      "104.20.252.40",
      "104.20.210.180",
      "104.24.217.219",
      "104.17.11.111",
      "172.67.175.176"
    ],
    "SOUTH": [
      "172.67.254.145",
      "104.19.200.102",
      "104.24.224.49",
      "172.65.96.217",
      "104.17.45.101",
      "104.21.45.205",
      "104.22.31.249",
      "104.17.177.106",
      "104.27.63.247",
      "104.21.239.12"
    ],
    "NORTH": [
      "104.18.109.76",
      "104.20.35.93",
      "172.65.254.184",
      "104.17.80.236",
      "104.18.211.135",
      "104.16.210.43",
      "172.67.130.185",
      "172.65.127.170",
      "104.25.46.228",
      "104.20.160.227",
      "172.65.48.143",
      "104.20.80.195"
    ],
    "CENTRAL": [
      "104.18.101.236",
      "104.21.26.244",
      "104.17.229.209",
      "104.22.58.28",
      "172.66.204.117",
      "104.27.39.19"
    ],
    "SOUTHWEST": [
      "104.25.169.141",
      "104.24.88.157",
      "104.24.65.214",
      "172.65.50.89",
      "104.26.3.58",
      "104.20.37.30",
      "172.65.34.203",
      "104.25.84.151"
    ],
    "NORTHWEST": [
      "172.67.199.54",
      "104.17.9.73",
      "104.24.9.89"
    ],
    "NORTHEAST": [
      "104.17.26.166",
      "104.16.60.135",
      "104.18.218.218",
      "104.25.60.185",
      "172.65.8.84",
      "104.17.191.10",
      "172.67.40.44",
      "104.19.211.84",
      "104.20.151.76",
      "104.21.45.1",
      "104.17.229.125",
      "104.21.207.131",
      "172.65.170.26"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}