// IP池配置 - 更新时间: 2025-01-16T15:29:37.293260
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "172.65.91.241",
      "104.27.192.85",
      "104.16.105.193",
      "104.20.147.86",
      "104.18.181.173",
      "104.25.168.212",
      "104.24.185.78",
      "104.20.181.229",
      "172.67.83.209",
      "104.24.182.146",
      "104.22.8.121"
    ],
    "SOUTH": [
      "104.16.120.215",
      "104.19.216.34",
      "104.21.220.50",
      "104.27.82.178",
      "104.25.54.32",
      "104.27.39.105",
      "104.19.70.108",
      "104.17.99.59",
      "104.17.112.240",
      "104.26.6.95",
      "104.20.250.202",
      "104.25.98.188",
      "104.24.8.112",
      "104.20.66.213"
    ],
    "NORTH": [
      "104.21.6.67",
      "104.21.119.145",
      "104.18.141.8",
      "1.1.1.49",
      "104.27.32.91",
      "104.20.200.230",
      "104.20.100.92",
      "104.16.251.82",
      "104.20.48.54",
      "104.25.127.221",
      "104.20.87.109"
    ],
    "CENTRAL": [
      "104.21.224.26",
      "104.18.6.99",
      "104.16.87.115",
      "104.21.22.141",
      "104.20.135.173"
    ],
    "SOUTHWEST": [
      "104.18.58.126",
      "104.17.135.105",
      "104.21.233.234",
      "104.27.192.130",
      "104.17.205.66",
      "104.19.43.235",
      "104.24.131.132",
      "104.24.219.20"
    ],
    "NORTHWEST": [
      "172.67.205.211",
      "104.19.122.194",
      "104.16.251.18",
      "104.25.196.161",
      "104.16.8.7",
      "104.20.152.133",
      "172.67.57.40"
    ],
    "NORTHEAST": [
      "172.65.34.69",
      "188.114.99.177",
      "104.21.193.9",
      "172.67.186.163",
      "172.67.171.34",
      "104.19.254.116",
      "104.19.42.129",
      "104.16.179.80",
      "104.18.3.46",
      "172.65.226.136",
      "104.19.130.89",
      "104.16.70.175",
      "104.24.136.129",
      "104.27.33.111",
      "104.20.169.188",
      "172.65.97.79",
      "172.65.169.204",
      "104.24.199.87",
      "172.65.77.189",
      "172.67.93.17"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.19.33.209",
      "172.67.115.136",
      "104.27.43.90",
      "104.24.78.158",
      "104.19.89.103",
      "104.18.119.105",
      "172.65.152.238",
      "104.24.177.150",
      "104.26.6.95",
      "104.24.219.20"
    ],
    "SOUTH": [
      "104.24.226.115",
      "104.17.149.167",
      "104.24.254.215",
      "104.21.119.145",
      "104.24.53.40",
      "104.27.192.130",
      "104.17.96.195",
      "104.20.100.92",
      "104.20.87.109",
      "104.24.199.87",
      "172.67.93.17",
      "172.67.57.40"
    ],
    "NORTH": [
      "104.25.5.91",
      "172.65.34.69",
      "172.67.205.211",
      "1.1.1.49",
      "104.20.142.64",
      "104.24.243.110",
      "104.20.119.239",
      "104.21.233.234",
      "104.21.71.63",
      "104.17.153.245",
      "104.19.42.129",
      "172.67.171.34",
      "172.67.207.203",
      "104.20.135.173",
      "172.65.77.189",
      "104.20.66.213"
    ],
    "CENTRAL": [
      "104.24.155.147",
      "104.24.24.72",
      "104.19.175.148",
      "104.27.82.178",
      "104.21.224.26",
      "104.27.39.105",
      "104.17.99.59",
      "104.16.70.175",
      "104.19.43.235",
      "104.24.182.146"
    ],
    "SOUTHWEST": [
      "104.24.210.46",
      "172.67.187.21",
      "104.21.193.9",
      "104.24.232.152",
      "172.65.226.136",
      "104.17.205.66",
      "104.19.70.108",
      "104.16.251.82",
      "104.25.168.212",
      "104.25.98.188"
    ],
    "NORTHWEST": [
      "172.67.76.67",
      "104.25.63.1",
      "104.16.39.53",
      "104.20.215.216",
      "104.17.135.105",
      "104.20.182.69",
      "104.16.105.193",
      "104.17.191.120",
      "104.25.100.221",
      "104.25.39.207",
      "104.16.87.115",
      "104.21.220.50",
      "104.27.33.166",
      "104.18.7.95",
      "172.67.186.163",
      "104.18.181.173",
      "104.20.48.54",
      "172.67.83.209",
      "172.65.97.79",
      "104.20.152.133"
    ],
    "NORTHEAST": [
      "172.65.20.115",
      "104.22.7.173",
      "104.25.174.49",
      "104.16.213.110",
      "104.17.189.17",
      "104.17.105.157",
      "104.17.112.240",
      "104.25.127.221"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.24.210.46",
      "104.25.100.221",
      "104.27.33.166",
      "104.18.7.95",
      "172.65.169.204"
    ],
    "SOUTH": [
      "104.17.149.167",
      "104.24.226.115",
      "104.19.27.207",
      "104.24.24.72",
      "172.67.115.136",
      "104.25.174.49",
      "104.20.64.119",
      "172.65.152.238",
      "104.19.122.194",
      "104.20.181.229",
      "104.22.8.121"
    ],
    "NORTH": [
      "104.17.30.218",
      "104.27.46.66",
      "104.20.215.216",
      "104.19.130.23",
      "104.19.175.148",
      "104.16.213.110",
      "104.16.251.18",
      "104.27.32.91",
      "104.20.200.230",
      "104.16.8.7",
      "104.24.131.132"
    ],
    "CENTRAL": [
      "104.17.137.236",
      "172.67.76.67",
      "104.18.6.99",
      "104.24.78.158",
      "104.22.7.173",
      "104.25.54.32"
    ],
    "SOUTHWEST": [
      "104.21.6.67",
      "104.20.142.64",
      "104.16.120.215",
      "104.19.132.137",
      "104.18.241.191",
      "104.18.58.126"
    ],
    "NORTHWEST": [
      "104.19.254.116",
      "104.21.32.61",
      "104.16.179.80",
      "104.20.42.192",
      "104.27.33.111"
    ],
    "NORTHEAST": [
      "104.16.103.122",
      "104.27.192.85",
      "104.27.56.251",
      "104.18.141.8",
      "104.21.71.63",
      "104.21.22.141",
      "104.25.188.108",
      "104.24.232.152",
      "172.67.70.29"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}