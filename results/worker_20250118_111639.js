// IP池配置 - 更新时间: 2025-01-18T11:16:37.573872
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.18.84.118",
      "104.17.138.105",
      "104.16.11.166",
      "172.67.47.148",
      "172.67.254.234",
      "172.65.39.60",
      "104.17.48.62",
      "104.25.119.169",
      "172.65.185.168",
      "104.25.225.11",
      "104.20.29.119",
      "104.27.49.85"
    ],
    "SOUTH": [
      "104.18.51.92",
      "104.17.203.57",
      "104.19.242.141",
      "104.16.43.181",
      "104.21.61.76",
      "104.17.166.192",
      "104.20.157.140",
      "104.17.247.141",
      "104.27.50.203",
      "172.67.0.52"
    ],
    "NORTH": [
      "104.18.62.198",
      "104.21.203.196",
      "104.17.215.110",
      "104.24.146.63",
      "104.19.149.202",
      "104.24.215.21",
      "104.17.37.170",
      "104.24.191.47",
      "104.24.151.0"
    ],
    "CENTRAL": [
      "104.17.96.163",
      "104.19.114.94",
      "104.27.72.181",
      "104.21.33.131",
      "108.162.192.132",
      "104.18.102.62",
      "104.19.197.108",
      "172.67.59.222",
      "104.25.14.46",
      "104.20.197.136",
      "104.24.185.177",
      "104.25.113.160"
    ],
    "SOUTHWEST": [
      "172.65.251.124",
      "104.16.146.156",
      "172.65.39.135",
      "104.17.79.97",
      "104.17.104.211",
      "104.20.101.139",
      "104.25.52.92",
      "172.66.200.203"
    ],
    "NORTHWEST": [
      "172.67.195.246",
      "104.18.93.78",
      "104.22.12.198",
      "104.20.139.63",
      "104.20.82.1",
      "104.24.229.108",
      "104.27.44.141"
    ],
    "NORTHEAST": [
      "104.16.150.171",
      "172.67.198.145",
      "104.21.75.133",
      "104.19.142.45",
      "104.16.120.65",
      "104.19.84.198",
      "104.19.142.61",
      "172.65.85.53",
      "104.19.131.95",
      "172.67.22.178",
      "172.65.250.140",
      "104.18.91.63",
      "104.24.11.205",
      "104.17.170.67",
      "104.25.191.15",
      "104.24.195.105"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.19.216.168",
      "104.19.19.83",
      "104.16.146.156",
      "172.67.52.233",
      "104.21.6.132",
      "104.18.84.118",
      "172.67.22.178",
      "104.24.146.63",
      "104.17.247.141"
    ],
    "SOUTH": [
      "104.22.68.224",
      "172.67.24.167",
      "104.21.203.196",
      "172.67.143.169",
      "104.27.98.13",
      "104.20.195.48",
      "104.16.150.171",
      "104.20.68.135",
      "104.16.43.181",
      "104.19.84.198",
      "104.17.37.170",
      "104.24.191.47",
      "172.65.185.168",
      "104.20.139.63",
      "172.67.59.222",
      "104.24.229.108"
    ],
    "NORTH": [
      "104.17.96.163",
      "104.18.93.78",
      "104.19.114.94",
      "172.67.109.222",
      "104.25.148.8",
      "172.67.142.167",
      "172.65.39.135",
      "104.18.234.184",
      "104.18.51.92",
      "104.25.52.92",
      "172.66.200.203"
    ],
    "CENTRAL": [
      "172.67.15.6",
      "104.25.142.178",
      "172.67.195.246",
      "172.67.237.232",
      "104.17.62.67",
      "172.65.85.53",
      "104.27.72.181",
      "104.17.79.97",
      "172.65.250.140",
      "104.20.82.1",
      "104.25.225.11",
      "104.24.151.0",
      "104.25.191.15",
      "104.27.44.141",
      "104.20.197.136",
      "104.24.185.177"
    ],
    "SOUTHWEST": [
      "104.19.142.45",
      "172.65.174.93",
      "104.17.89.250",
      "104.25.35.185",
      "104.17.203.57",
      "104.21.33.131",
      "104.17.48.62",
      "104.17.170.67",
      "104.19.197.108",
      "104.20.29.119",
      "104.25.113.160"
    ],
    "NORTHWEST": [
      "104.16.69.78",
      "104.18.123.180",
      "104.19.198.15",
      "172.65.100.59",
      "104.16.187.23",
      "104.19.131.95",
      "104.18.62.198",
      "104.18.205.6",
      "172.67.84.248",
      "104.17.166.192",
      "108.162.192.132"
    ],
    "NORTHEAST": [
      "172.65.236.170",
      "104.19.142.61",
      "104.16.120.65",
      "172.67.35.212",
      "104.21.61.76",
      "104.19.149.202",
      "104.20.157.140",
      "104.18.102.62"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.16.11.166",
      "104.17.62.67",
      "104.21.75.133",
      "104.18.214.184",
      "172.65.100.59",
      "172.67.143.169",
      "104.18.91.63",
      "104.24.11.205",
      "104.20.101.139"
    ],
    "SOUTH": [
      "172.67.24.167",
      "104.20.68.135",
      "172.65.39.60",
      "104.19.242.141",
      "104.18.123.180"
    ],
    "NORTH": [
      "104.19.35.138",
      "104.17.62.92",
      "172.67.132.196",
      "104.27.63.135",
      "172.67.237.232",
      "172.67.198.145",
      "172.67.254.234",
      "172.67.142.167",
      "172.67.205.225",
      "104.18.52.15",
      "104.27.50.203",
      "104.27.49.85"
    ],
    "CENTRAL": [
      "104.21.43.201",
      "104.24.215.21"
    ],
    "SOUTHWEST": [
      "104.17.171.117",
      "104.17.215.110",
      "104.19.19.83",
      "172.65.174.93",
      "104.24.87.197",
      "104.27.98.13",
      "104.19.198.15",
      "172.67.109.222",
      "104.18.52.77",
      "104.20.191.145",
      "104.25.148.8",
      "104.27.76.230",
      "172.65.251.124",
      "104.16.166.118",
      "104.20.63.121",
      "104.22.12.198"
    ],
    "NORTHWEST": [
      "104.16.69.78"
    ],
    "NORTHEAST": [
      "104.17.240.158",
      "172.67.184.178",
      "104.20.127.230",
      "104.25.119.169",
      "172.67.0.52"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}