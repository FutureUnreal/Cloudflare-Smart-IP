// IP池配置 - 更新时间: 2025-01-14T19:38:20.140127
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.17.13.87",
      "104.16.226.219",
      "104.18.111.63",
      "104.19.121.8",
      "104.21.213.54",
      "104.22.49.139",
      "172.67.201.199",
      "104.20.138.130",
      "104.20.145.184",
      "172.65.17.178",
      "104.27.113.81",
      "104.20.88.201",
      "104.25.63.65",
      "104.20.1.142",
      "104.20.73.96",
      "104.24.78.169"
    ],
    "SOUTH": [
      "104.17.202.5",
      "108.162.192.253",
      "104.18.19.131",
      "104.19.110.242",
      "104.27.199.42",
      "104.24.14.18",
      "172.67.52.12",
      "104.25.226.119",
      "172.66.159.81",
      "104.26.12.161",
      "104.25.253.210",
      "104.20.13.16"
    ],
    "NORTH": [
      "104.17.172.7",
      "104.16.60.47",
      "172.65.49.44",
      "172.67.143.43",
      "104.17.49.221",
      "104.19.155.219",
      "172.67.20.249",
      "104.20.144.147",
      "172.67.110.146",
      "104.27.55.209",
      "172.67.64.148",
      "104.25.57.92",
      "104.24.90.172",
      "104.24.236.26"
    ],
    "CENTRAL": [
      "104.17.99.224",
      "104.17.105.145",
      "104.16.104.74",
      "104.18.234.235",
      "104.16.41.217",
      "104.19.209.127",
      "104.21.23.224",
      "172.65.179.206",
      "104.24.230.58"
    ],
    "SOUTHWEST": [
      "104.16.173.93",
      "104.17.238.99",
      "104.17.25.106",
      "104.19.211.251",
      "172.65.15.125",
      "172.65.50.104",
      "104.24.75.15",
      "172.67.99.27",
      "104.24.81.151",
      "104.25.28.207",
      "104.20.151.147"
    ],
    "NORTHWEST": [
      "104.17.125.154",
      "172.65.211.184",
      "104.19.143.169",
      "104.16.223.254",
      "104.25.107.172",
      "172.65.200.55",
      "104.24.66.171",
      "104.24.165.215",
      "104.20.26.134",
      "172.65.134.51",
      "104.20.192.231",
      "104.20.10.233",
      "104.20.156.142",
      "104.25.58.198"
    ],
    "NORTHEAST": [
      "104.17.201.163",
      "104.17.86.167",
      "172.67.197.209",
      "172.67.224.244",
      "104.17.245.2",
      "172.67.211.55",
      "104.19.110.103",
      "104.16.178.7",
      "104.17.140.70",
      "104.25.119.67",
      "172.66.148.126",
      "104.20.38.168"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.17.125.154",
      "104.17.238.99",
      "172.65.49.44",
      "104.21.4.89",
      "172.65.211.184",
      "172.65.50.104",
      "104.20.233.113",
      "104.25.119.67"
    ],
    "SOUTH": [
      "172.65.39.112",
      "104.25.39.177",
      "104.16.63.64",
      "104.16.157.30",
      "104.27.113.81",
      "104.24.75.15",
      "104.16.41.217",
      "104.25.226.119"
    ],
    "NORTH": [
      "104.19.155.219",
      "104.18.236.7",
      "104.19.211.251",
      "104.27.25.74",
      "172.67.41.229",
      "104.21.48.193",
      "104.19.110.103",
      "104.20.144.147",
      "172.67.64.148",
      "104.17.86.167",
      "104.20.151.147",
      "104.20.13.16"
    ],
    "CENTRAL": [
      "104.21.80.202",
      "104.27.80.226",
      "104.19.209.127",
      "104.20.145.184",
      "172.67.110.146",
      "172.67.20.249",
      "104.16.223.254",
      "172.65.200.55",
      "104.25.107.172",
      "172.65.229.136",
      "104.24.81.151",
      "172.66.159.81",
      "104.20.1.142"
    ],
    "SOUTHWEST": [
      "108.162.192.253",
      "104.22.49.139",
      "172.67.211.55",
      "104.25.123.242",
      "172.67.15.171",
      "104.19.0.82",
      "104.18.162.136",
      "104.21.23.224",
      "104.20.107.215",
      "172.65.15.125",
      "104.20.26.134",
      "104.20.88.201",
      "104.20.156.142",
      "104.25.253.210"
    ],
    "NORTHWEST": [
      "104.16.226.219",
      "104.18.111.63",
      "104.19.143.169",
      "104.16.178.7",
      "104.17.105.145",
      "104.17.13.87",
      "104.27.199.42",
      "104.17.25.106",
      "104.27.55.209",
      "172.67.197.209",
      "104.19.121.8",
      "104.20.189.24",
      "104.24.14.18",
      "172.67.99.27",
      "172.67.143.43",
      "172.67.52.12",
      "172.66.148.126",
      "104.20.73.96",
      "104.24.230.58",
      "104.20.38.168"
    ],
    "NORTHEAST": [
      "104.16.97.136",
      "104.24.53.122",
      "104.18.81.100",
      "104.20.138.130"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.140.70",
      "104.18.162.136",
      "104.25.123.242",
      "104.27.80.226",
      "172.65.179.206",
      "104.25.28.207"
    ],
    "SOUTH": [
      "104.17.172.7",
      "104.21.4.89",
      "172.67.15.171"
    ],
    "NORTH": [
      "104.18.236.7",
      "104.16.60.47",
      "172.67.41.229",
      "104.21.80.202",
      "104.17.201.163",
      "104.20.233.113",
      "104.26.12.161",
      "104.24.236.26"
    ],
    "CENTRAL": [
      "104.22.53.199",
      "104.17.202.5",
      "104.20.189.24",
      "104.20.192.231",
      "104.24.90.172"
    ],
    "SOUTHWEST": [
      "104.17.49.221",
      "104.16.173.93",
      "172.65.17.178",
      "104.20.24.246",
      "104.24.165.215",
      "104.24.78.169"
    ],
    "NORTHWEST": [
      "104.24.53.122",
      "104.25.58.198"
    ],
    "NORTHEAST": [
      "104.17.99.224",
      "104.16.157.30",
      "104.17.245.2",
      "104.25.39.177",
      "172.67.224.244",
      "104.21.213.54",
      "172.65.74.75",
      "172.65.39.112",
      "104.25.57.92",
      "104.24.66.171",
      "104.25.63.65"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}