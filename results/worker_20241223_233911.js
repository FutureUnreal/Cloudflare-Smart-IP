// IP池配置 - 更新时间: 2024-12-23T23:39:10.285244
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "172.65.224.224",
      "104.17.155.39",
      "104.18.49.36",
      "104.16.253.9",
      "104.18.92.218",
      "172.67.155.72",
      "172.67.183.2",
      "104.24.129.80"
    ],
    "SOUTH": [
      "104.17.235.8",
      "104.21.231.136",
      "104.20.34.148",
      "104.21.9.130",
      "104.20.16.114",
      "172.65.132.109",
      "172.65.72.182",
      "104.27.195.213",
      "104.25.176.141"
    ],
    "NORTH": [
      "104.19.26.146",
      "104.17.108.164",
      "104.16.138.70",
      "104.18.131.27",
      "104.19.34.55",
      "104.17.64.226",
      "104.18.231.239",
      "104.20.238.103",
      "104.25.53.160",
      "172.66.177.145",
      "172.65.78.37",
      "172.65.122.253",
      "104.20.51.16",
      "104.24.91.96",
      "104.27.70.120",
      "104.20.246.133"
    ],
    "CENTRAL": [
      "104.18.200.223",
      "104.16.132.146",
      "172.67.77.221",
      "104.20.174.112",
      "172.65.117.130",
      "104.21.54.86",
      "104.24.246.58",
      "172.65.129.173",
      "104.24.68.142",
      "172.65.101.249",
      "104.20.196.129"
    ],
    "SOUTHWEST": [
      "172.65.238.39",
      "104.16.9.61",
      "104.18.78.184",
      "104.16.75.185",
      "104.17.72.76",
      "104.18.57.79",
      "104.19.251.239",
      "104.25.90.167",
      "104.27.205.205",
      "104.20.125.11",
      "104.24.198.221",
      "104.25.87.137",
      "104.27.6.248",
      "104.25.174.82",
      "104.24.160.133"
    ],
    "NORTHWEST": [
      "104.19.153.210",
      "104.17.237.180",
      "104.17.238.4",
      "104.21.3.124",
      "104.21.23.243",
      "104.18.206.87",
      "104.18.142.26",
      "104.21.214.168",
      "104.16.127.144",
      "104.20.45.137",
      "104.27.195.143",
      "104.25.109.103",
      "172.67.123.176",
      "104.27.44.232",
      "104.24.144.226"
    ],
    "NORTHEAST": [
      "104.17.117.100",
      "104.18.33.12",
      "172.65.107.78",
      "104.20.18.125",
      "104.27.3.166",
      "172.65.151.0",
      "104.27.99.22",
      "172.67.124.41",
      "104.20.107.177",
      "172.65.116.77"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.17.234.237",
      "172.65.49.217",
      "104.16.185.142",
      "104.19.26.146",
      "104.18.231.239",
      "104.27.100.204",
      "172.66.197.59",
      "104.24.129.80",
      "104.20.107.177"
    ],
    "SOUTH": [
      "104.21.104.214",
      "172.67.169.115",
      "172.66.135.104",
      "104.16.253.9",
      "172.67.155.72",
      "104.17.28.169",
      "172.65.238.39",
      "104.19.219.114",
      "104.16.176.201",
      "104.16.132.146",
      "104.25.53.160",
      "172.65.233.118",
      "172.65.72.182",
      "104.27.44.232",
      "104.24.144.226"
    ],
    "NORTH": [
      "104.16.73.41",
      "104.18.200.223",
      "104.16.138.70",
      "104.17.72.76",
      "104.20.190.206",
      "104.18.78.184",
      "104.19.53.137",
      "104.21.3.124",
      "104.18.142.26",
      "104.27.88.34",
      "104.20.16.114",
      "104.27.195.213",
      "104.27.3.166"
    ],
    "CENTRAL": [
      "104.17.108.164",
      "104.19.153.210",
      "104.24.37.243",
      "104.24.138.158",
      "104.19.251.239",
      "104.21.214.168",
      "104.20.34.148",
      "104.21.54.86",
      "104.20.196.129",
      "172.67.124.41",
      "104.25.174.82",
      "104.24.160.133"
    ],
    "SOUTHWEST": [
      "104.17.115.227",
      "104.18.143.28",
      "104.21.206.103",
      "104.22.6.40",
      "104.21.95.206",
      "104.17.117.100",
      "104.22.54.170",
      "104.17.238.4",
      "104.18.49.36",
      "172.67.77.221",
      "104.18.33.12",
      "172.65.117.130",
      "104.20.174.112",
      "104.20.125.11",
      "172.65.129.173",
      "104.25.87.137"
    ],
    "NORTHWEST": [
      "172.67.108.4",
      "104.21.68.239",
      "172.67.183.2",
      "104.17.168.83",
      "104.24.77.220",
      "104.18.57.79",
      "104.17.224.225",
      "104.25.109.103"
    ],
    "NORTHEAST": [
      "104.16.75.185",
      "104.18.206.87",
      "104.20.238.103",
      "104.21.9.130",
      "104.27.99.22",
      "172.65.151.0",
      "104.25.176.141",
      "104.24.68.142",
      "172.65.101.249"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.19.46.18",
      "172.67.169.115",
      "104.21.231.136",
      "104.21.104.214",
      "172.67.126.16"
    ],
    "SOUTH": [
      "172.65.49.217",
      "104.18.228.36",
      "104.24.91.96",
      "104.27.70.120",
      "104.27.195.143"
    ],
    "NORTH": [
      "104.17.168.83",
      "104.24.71.42",
      "104.25.62.4",
      "172.65.224.224",
      "172.65.78.37",
      "104.27.205.205",
      "104.24.198.221",
      "172.67.123.176"
    ],
    "CENTRAL": [
      "104.17.155.39",
      "172.65.197.38",
      "104.18.60.29",
      "104.19.219.114",
      "104.18.131.27",
      "104.17.224.225",
      "104.20.45.137",
      "104.24.246.58",
      "104.20.246.133"
    ],
    "SOUTHWEST": [
      "104.18.92.218",
      "104.19.34.55",
      "104.22.66.60",
      "104.17.64.226",
      "104.27.100.204",
      "104.16.185.142",
      "104.22.54.170",
      "172.66.135.104",
      "104.20.51.16",
      "104.27.6.248"
    ],
    "NORTHWEST": [
      "104.20.166.59"
    ],
    "NORTHEAST": [
      "104.16.73.41",
      "104.17.234.237",
      "104.24.138.158",
      "104.21.206.103",
      "104.16.127.144",
      "172.65.132.109"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}