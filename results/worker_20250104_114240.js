// IP池配置 - 更新时间: 2025-01-04T11:42:38.988125
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.19.101.188",
      "104.18.104.225",
      "104.17.34.94",
      "104.16.176.254",
      "104.21.32.214",
      "172.67.163.201",
      "104.17.75.76",
      "104.21.79.57",
      "104.16.142.170",
      "104.19.49.1",
      "104.16.158.25",
      "172.67.75.163",
      "104.25.161.141",
      "104.19.39.13"
    ],
    "SOUTH": [
      "104.17.201.67",
      "104.19.5.61",
      "104.18.176.35",
      "172.67.230.53",
      "104.21.11.164",
      "104.19.195.223",
      "104.20.189.147",
      "104.25.227.42",
      "104.26.6.138",
      "104.25.116.51"
    ],
    "NORTH": [
      "104.21.100.254",
      "104.17.17.131",
      "104.21.125.227",
      "104.18.7.149",
      "104.16.54.16",
      "172.67.242.111",
      "104.21.54.100",
      "104.19.136.210",
      "172.67.16.96",
      "172.66.175.78",
      "172.65.139.98"
    ],
    "CENTRAL": [
      "104.16.163.93",
      "104.17.219.228",
      "104.21.72.29",
      "172.65.197.15",
      "104.17.68.185",
      "172.67.144.115",
      "172.65.144.223",
      "104.27.70.244",
      "104.25.116.221",
      "104.27.82.58"
    ],
    "SOUTHWEST": [
      "104.17.89.156",
      "104.16.65.34",
      "104.19.253.211",
      "172.67.140.174",
      "172.65.153.162",
      "172.67.118.220",
      "172.67.69.188",
      "104.24.230.119",
      "104.20.179.176",
      "172.65.164.149",
      "104.20.2.201",
      "104.24.226.179",
      "104.20.60.172",
      "172.65.115.81",
      "104.27.67.76"
    ],
    "NORTHWEST": [
      "104.18.155.121",
      "104.18.40.105",
      "104.19.43.43",
      "172.67.147.44",
      "172.65.253.248",
      "172.65.43.19",
      "104.17.132.183",
      "104.19.135.44",
      "172.66.162.121",
      "104.20.232.216",
      "104.20.95.228",
      "172.67.91.220",
      "172.65.186.132",
      "104.18.47.18",
      "104.17.21.4",
      "104.25.28.69",
      "104.24.79.79",
      "104.20.116.222"
    ],
    "NORTHEAST": [
      "172.65.19.48",
      "172.65.25.45",
      "104.16.140.18",
      "104.19.239.157",
      "104.17.21.241",
      "104.18.64.232",
      "172.65.115.237",
      "104.17.215.112",
      "104.25.185.190",
      "104.25.68.108",
      "104.20.56.115",
      "104.25.44.55"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.16.163.93",
      "104.18.104.225",
      "104.17.219.228",
      "104.18.176.35",
      "104.21.54.100",
      "104.19.5.61",
      "104.19.43.43",
      "104.25.135.80",
      "172.67.118.220",
      "104.20.232.216",
      "104.19.39.13",
      "104.24.226.179",
      "104.20.56.115"
    ],
    "SOUTH": [
      "103.21.244.165",
      "104.27.50.185",
      "104.25.89.76",
      "104.17.75.76",
      "172.67.147.44",
      "172.65.139.98",
      "104.19.239.157",
      "104.19.49.1",
      "172.67.69.188",
      "104.24.230.119",
      "104.20.179.176",
      "104.26.6.138",
      "104.20.2.201"
    ],
    "NORTH": [
      "104.17.34.94",
      "104.16.20.45",
      "172.65.253.248",
      "172.65.212.45",
      "104.21.72.29",
      "172.65.197.15",
      "104.17.132.183",
      "172.67.230.53",
      "172.67.144.115",
      "172.67.75.163",
      "104.25.161.141",
      "104.25.116.51",
      "104.20.116.222"
    ],
    "CENTRAL": [
      "104.16.140.18",
      "104.19.136.210",
      "104.21.79.57",
      "104.21.125.227",
      "104.21.10.176",
      "104.19.195.223",
      "104.16.158.25",
      "104.18.64.232",
      "172.65.144.223",
      "104.20.189.147",
      "104.27.70.244",
      "104.25.116.221",
      "104.27.82.58"
    ],
    "SOUTHWEST": [
      "104.20.16.152",
      "104.18.53.31",
      "104.16.176.254",
      "104.21.29.126",
      "104.19.253.211",
      "104.25.158.72",
      "172.67.16.96",
      "104.17.73.120",
      "104.16.142.170",
      "104.21.11.164",
      "172.66.1.173",
      "172.65.115.237",
      "104.17.215.112",
      "104.18.47.18",
      "104.17.21.4",
      "104.25.28.69"
    ],
    "NORTHWEST": [
      "172.67.140.174",
      "172.66.175.78",
      "172.67.247.171",
      "172.65.186.132",
      "104.25.227.42",
      "172.65.164.149",
      "104.25.68.108",
      "104.24.79.79"
    ],
    "NORTHEAST": [
      "172.67.163.201",
      "104.25.240.102",
      "104.20.171.244",
      "104.19.135.44",
      "104.20.60.172",
      "104.27.67.76"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "172.65.25.45",
      "104.27.50.185",
      "172.67.46.82",
      "104.18.7.149",
      "172.66.162.121"
    ],
    "SOUTH": [
      "104.19.101.188",
      "172.65.52.123",
      "172.65.43.19",
      "103.21.244.165",
      "104.20.95.228"
    ],
    "NORTH": [
      "172.67.243.194",
      "104.16.65.34",
      "104.16.20.45",
      "104.17.68.185",
      "172.66.1.173"
    ],
    "CENTRAL": [
      "104.17.219.228",
      "104.20.171.244",
      "104.17.73.120",
      "172.67.91.220",
      "104.25.185.190",
      "172.65.115.81"
    ],
    "SOUTHWEST": [
      "104.18.53.31",
      "104.18.40.105",
      "104.21.29.126",
      "104.25.158.72",
      "172.65.19.48",
      "104.17.201.67",
      "104.17.89.156",
      "104.21.10.176",
      "172.65.212.45"
    ],
    "NORTHWEST": [
      "104.25.135.80"
    ],
    "NORTHEAST": [
      "104.25.89.76",
      "104.16.54.16",
      "172.67.247.171",
      "104.25.44.55"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}