// IP池配置 - 更新时间: 2025-01-11T23:05:48.289858
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.18.61.87",
      "104.19.11.13",
      "104.17.30.154",
      "104.19.197.223",
      "104.19.59.35",
      "104.24.83.201",
      "172.65.35.32",
      "104.22.2.231",
      "104.20.171.251",
      "104.25.72.241",
      "104.25.231.229",
      "172.67.70.43"
    ],
    "SOUTH": [
      "104.16.146.47",
      "104.19.219.3",
      "104.17.9.68",
      "104.19.122.15",
      "104.24.53.125",
      "172.65.139.205",
      "172.67.197.173"
    ],
    "NORTH": [
      "104.19.71.92",
      "104.19.232.243",
      "188.114.99.11",
      "172.67.248.35",
      "104.18.45.113",
      "104.17.60.118",
      "104.18.39.130",
      "104.17.75.4",
      "104.24.81.237",
      "104.25.35.159",
      "172.67.9.219",
      "104.22.74.26",
      "104.25.213.72",
      "172.65.110.101",
      "104.20.136.121",
      "104.24.85.61"
    ],
    "CENTRAL": [
      "104.19.145.168",
      "104.17.2.225",
      "104.19.88.159",
      "104.18.252.49",
      "104.17.156.94",
      "104.16.10.157",
      "172.66.0.197",
      "104.21.0.42",
      "104.21.195.74",
      "104.20.232.60",
      "172.67.242.51",
      "104.25.228.0",
      "104.24.144.112",
      "172.66.163.210",
      "104.20.28.58",
      "104.27.65.21"
    ],
    "SOUTHWEST": [
      "104.17.199.19",
      "104.17.146.129",
      "104.19.156.106",
      "104.21.234.60",
      "104.19.218.242",
      "104.19.112.15",
      "104.16.219.43",
      "172.67.17.11",
      "172.65.15.204",
      "172.67.98.61",
      "104.20.235.163",
      "104.20.14.31",
      "104.20.222.223"
    ],
    "NORTHWEST": [
      "104.16.82.17",
      "104.19.66.207",
      "104.19.25.40",
      "104.19.146.138",
      "103.21.246.89",
      "104.27.119.249",
      "104.24.16.235",
      "104.25.58.123"
    ],
    "NORTHEAST": [
      "172.67.138.15",
      "104.21.66.100",
      "104.16.236.225",
      "104.16.30.232",
      "104.21.197.74",
      "104.17.70.143",
      "104.20.187.226",
      "104.24.60.255",
      "172.67.126.132",
      "104.25.239.138",
      "104.24.161.188"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.25.232.250",
      "104.19.88.159",
      "104.21.14.98",
      "104.18.45.113",
      "104.25.30.238",
      "104.24.92.43",
      "104.20.187.226",
      "172.67.98.61",
      "104.20.28.58"
    ],
    "SOUTH": [
      "104.17.156.94",
      "104.18.252.49",
      "104.19.122.15",
      "104.24.210.158",
      "104.17.146.129",
      "104.21.234.60",
      "104.22.2.231",
      "104.16.159.192",
      "104.24.144.112",
      "104.20.14.31",
      "104.25.58.123"
    ],
    "NORTH": [
      "104.19.215.135",
      "104.27.67.103",
      "104.19.71.92",
      "172.67.33.252",
      "172.67.70.43",
      "104.19.206.21",
      "104.25.72.241",
      "104.22.74.26",
      "172.65.15.204",
      "104.24.16.235"
    ],
    "CENTRAL": [
      "104.16.93.203",
      "104.17.60.118",
      "104.20.223.216",
      "104.18.92.175",
      "172.66.141.200",
      "104.19.197.223",
      "172.67.52.38",
      "172.67.138.15",
      "104.19.184.134",
      "104.19.146.138",
      "104.20.94.61",
      "104.20.136.121",
      "104.24.161.188"
    ],
    "SOUTHWEST": [
      "172.65.230.181",
      "104.26.7.242",
      "172.65.129.137",
      "104.19.148.158",
      "104.18.55.213",
      "104.27.80.153",
      "104.19.145.168",
      "104.18.188.131",
      "104.25.228.0",
      "104.24.85.61"
    ],
    "NORTHWEST": [
      "104.16.30.232",
      "104.19.25.40",
      "104.21.221.100",
      "104.20.125.206",
      "104.24.254.2",
      "104.25.213.72",
      "104.24.81.237",
      "172.65.110.101",
      "172.67.242.51",
      "172.67.9.219",
      "172.67.6.200",
      "103.21.246.89"
    ],
    "NORTHEAST": [
      "104.18.121.108",
      "104.20.99.154",
      "172.65.139.205",
      "172.67.197.173",
      "104.24.60.255",
      "104.20.235.163"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.18.16.162",
      "104.20.223.216",
      "104.27.80.153",
      "104.18.52.165",
      "104.24.83.201",
      "104.20.94.61",
      "104.27.119.249"
    ],
    "SOUTH": [
      "104.17.30.154",
      "104.19.218.242",
      "104.20.186.152",
      "104.19.215.135",
      "104.19.112.15",
      "172.66.157.212",
      "104.24.203.207",
      "172.66.0.197",
      "172.65.129.137",
      "104.20.222.223"
    ],
    "NORTH": [
      "104.19.232.243",
      "104.24.180.101",
      "104.17.2.225",
      "104.16.93.203",
      "104.20.99.154",
      "104.19.249.165"
    ],
    "CENTRAL": [
      "104.19.148.158",
      "188.114.99.11",
      "104.27.67.103",
      "104.20.125.206",
      "104.20.47.252",
      "104.17.70.143",
      "104.21.221.100",
      "104.18.38.27",
      "172.65.194.126",
      "104.20.232.60",
      "104.24.254.2",
      "104.24.53.125"
    ],
    "SOUTHWEST": [
      "104.16.146.47",
      "104.24.210.158",
      "104.21.109.117",
      "104.19.0.138",
      "104.16.82.17",
      "172.67.17.11",
      "104.25.30.238",
      "104.20.161.21",
      "104.18.55.213",
      "104.27.65.21"
    ],
    "NORTHWEST": [
      "104.21.0.42"
    ],
    "NORTHEAST": [
      "172.65.230.181",
      "172.66.141.200",
      "104.21.195.74",
      "172.67.126.132"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}