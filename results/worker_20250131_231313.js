// IP池配置 - 更新时间: 2025-01-31T23:13:11.798709
const IP_POOLS = {
  "CHINA_TELECOM": {
    "EAST": [
      "104.16.252.57",
      "104.19.215.189",
      "104.17.159.150",
      "104.18.25.79",
      "172.67.249.71",
      "104.18.110.48",
      "104.27.91.38",
      "104.24.251.73",
      "104.21.217.153",
      "104.20.110.70",
      "104.27.105.242",
      "104.20.120.160",
      "104.24.1.148",
      "104.22.7.109"
    ],
    "SOUTH": [
      "104.18.13.135",
      "172.65.90.253",
      "104.16.85.1",
      "104.17.236.116",
      "104.19.48.77",
      "104.19.216.30",
      "104.17.240.218",
      "104.18.123.5",
      "104.21.52.165",
      "172.67.229.36",
      "172.65.32.166",
      "172.65.70.241",
      "104.24.48.168",
      "172.65.176.255",
      "104.24.188.184",
      "104.20.23.131"
    ],
    "NORTH": [
      "104.18.220.162",
      "104.17.199.26",
      "104.21.102.75",
      "172.67.234.158",
      "104.25.91.201",
      "104.24.92.248",
      "104.25.80.83",
      "104.20.143.254",
      "104.25.125.226",
      "172.65.109.54",
      "104.20.186.122",
      "104.21.85.53",
      "172.65.30.135"
    ],
    "CENTRAL": [
      "104.16.60.52",
      "104.18.71.112",
      "172.66.207.97",
      "104.24.209.61",
      "104.27.66.234",
      "104.22.4.201"
    ],
    "SOUTHWEST": [
      "104.19.188.104",
      "104.17.176.206",
      "104.16.185.29",
      "104.16.241.149",
      "104.19.198.78",
      "104.16.42.181",
      "104.19.142.160",
      "172.67.16.103",
      "172.67.246.223",
      "104.20.190.48",
      "104.24.245.117",
      "104.25.155.49"
    ],
    "NORTHWEST": [
      "104.18.61.175",
      "104.21.53.207",
      "104.21.29.245",
      "172.67.91.64",
      "172.67.82.163",
      "104.24.157.195"
    ],
    "NORTHEAST": [
      "104.19.193.136",
      "104.16.61.232",
      "104.18.181.122",
      "188.114.99.151",
      "104.25.141.247",
      "104.20.11.229",
      "172.65.101.44",
      "104.20.240.186",
      "104.22.69.197",
      "104.26.13.207"
    ]
  },
  "CHINA_UNICOM": {
    "EAST": [
      "104.17.159.150",
      "104.18.238.178",
      "104.19.216.30",
      "104.17.253.121",
      "104.18.13.135",
      "104.19.130.209",
      "172.66.133.0",
      "104.20.83.109",
      "104.25.56.74",
      "104.25.80.83",
      "104.20.143.254",
      "172.65.32.166",
      "104.20.23.131",
      "172.65.101.44",
      "172.65.30.135",
      "104.24.157.195"
    ],
    "SOUTH": [
      "104.19.48.77",
      "104.17.196.178",
      "104.18.123.5",
      "104.17.194.114",
      "172.67.249.71",
      "104.20.149.83",
      "104.20.254.91",
      "104.18.110.48",
      "104.24.78.81",
      "104.24.228.10",
      "104.16.185.29",
      "104.18.220.162",
      "172.67.234.158",
      "172.65.70.241",
      "172.67.91.64",
      "104.25.141.247",
      "104.24.245.117"
    ],
    "NORTH": [
      "104.18.178.97",
      "104.18.61.175",
      "172.67.165.213",
      "104.16.42.181",
      "104.22.0.136",
      "172.67.246.223",
      "104.25.125.226"
    ],
    "CENTRAL": [
      "104.16.60.52",
      "104.16.252.57",
      "104.21.239.5",
      "104.18.71.112",
      "104.21.53.207",
      "104.19.193.136",
      "104.20.128.79",
      "104.20.82.25",
      "104.21.197.11",
      "104.21.217.153",
      "172.65.109.54",
      "104.24.188.184",
      "104.22.4.201"
    ],
    "SOUTHWEST": [
      "104.18.134.214",
      "104.19.215.189",
      "104.21.20.60",
      "172.65.34.32",
      "104.20.62.250",
      "172.65.124.222",
      "104.17.232.190",
      "104.20.60.211",
      "104.19.75.146",
      "172.66.207.97",
      "104.25.91.201",
      "172.67.16.103",
      "104.21.52.165",
      "172.67.229.36",
      "104.20.11.229"
    ],
    "NORTHWEST": [
      "104.20.30.0",
      "104.17.240.218",
      "104.21.231.150",
      "104.24.53.25",
      "104.20.147.13",
      "104.18.223.172",
      "104.24.251.73",
      "104.17.199.26",
      "188.114.99.151",
      "104.25.148.131",
      "104.22.7.109",
      "104.24.1.148",
      "104.20.190.48",
      "104.25.155.49"
    ],
    "NORTHEAST": [
      "104.16.241.149",
      "104.18.25.79",
      "104.22.30.91",
      "104.22.22.217",
      "104.18.60.170",
      "172.65.176.255",
      "104.20.186.122",
      "104.20.240.186"
    ]
  },
  "CHINA_MOBILE": {
    "EAST": [
      "104.17.159.150",
      "104.16.37.239",
      "104.20.83.109",
      "104.25.28.188",
      "104.22.0.136",
      "104.25.56.74",
      "104.24.209.61"
    ],
    "SOUTH": [
      "104.18.178.97",
      "104.16.61.232",
      "104.21.69.185",
      "104.18.181.122",
      "104.20.147.13",
      "104.19.75.146"
    ],
    "NORTH": [
      "104.21.239.5",
      "104.16.85.1",
      "104.19.198.78",
      "104.20.149.83",
      "104.18.139.95"
    ],
    "CENTRAL": [
      "104.17.194.114",
      "104.21.231.150",
      "104.21.61.43",
      "104.18.134.214",
      "172.67.238.22",
      "104.24.78.81",
      "104.22.22.217",
      "104.25.78.30",
      "104.21.102.75",
      "104.26.13.207"
    ],
    "SOUTHWEST": [
      "104.16.45.46",
      "104.20.24.53",
      "172.67.165.213",
      "104.24.255.50",
      "104.22.30.91",
      "104.27.91.38",
      "172.67.82.163"
    ],
    "NORTHWEST": [
      "104.20.62.250",
      "172.65.22.29"
    ],
    "NORTHEAST": [
      "104.17.172.206",
      "104.17.253.121",
      "172.65.90.253",
      "104.20.128.79",
      "104.17.196.178",
      "104.21.197.11",
      "104.16.221.220",
      "104.21.29.245",
      "104.27.105.242"
    ]
  }
};

// ASN到运营商的映射
const ASN_TO_ISP = {
  // 电信
  '4134': 'CHINA_TELECOM',
  '4809': 'CHINA_TELECOM',
  // 联通
  '4837': 'CHINA_UNICOM', 
  '9929': 'CHINA_UNICOM',
  '4808': 'CHINA_UNICOM',
  // 移动
  '9808': 'CHINA_MOBILE',
  '56040': 'CHINA_MOBILE'
};

// 区域列表
const REGIONS = [
  'EAST',
  'NORTH', 
  'SOUTH',
  'CENTRAL',
  'SOUTHWEST',
  'NORTHWEST',
  'NORTHEAST'
];

// 错误类型定义
const ERRORS = {
  NO_IP: '无可用IP',
  UNKNOWN_ISP: '未知运营商',
  INVALID_REGION: '无效区域'
};

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const clientInfo = {
    ip: request.headers.get('CF-Connecting-IP'),
    asn: request.cf.asn.toString(),
    region: request.cf.region,
    colo: request.cf.colo
  };

  try {
    const isp = determineISP(clientInfo.asn);
    const region = determineRegion(clientInfo);
    const bestIP = await selectBestIP(isp, region);

    return new Response(JSON.stringify({
      status: 'success',
      client: clientInfo,
      result: {
        isp: isp,
        region: region,
        ip: bestIP
      }
    }), {
      headers: {
        'content-type': 'application/json',
        'cache-control': 'max-age=300'
      }
    });
  } catch (error) {
    const status = error.message === ERRORS.NO_IP ? 503 : 500;
    return new Response(JSON.stringify({
      status: 'error',
      message: error.message,
      client: clientInfo
    }), {
      status: status,
      headers: { 'content-type': 'application/json' }
    });
  }
}

function determineISP(asn) {
  const isp = ASN_TO_ISP[asn];
  if (!isp) {
    throw new Error(ERRORS.UNKNOWN_ISP);
  }
  return isp;
}

function determineRegion(clientInfo) {
  const regionMap = {
    'SHA': 'EAST',   // 上海
    'BEJ': 'NORTH',  // 北京
    'GUD': 'SOUTH',  // 广东
    'HUB': 'CENTRAL' // 湖北
  };

  if (clientInfo.region && regionMap[clientInfo.region]) {
    return regionMap[clientInfo.region];
  }

  // 默认返回华东
  return 'EAST';
}

async function selectBestIP(isp, region) {
  let candidates = [];

  // 1. 优先选择同ISP同区域的IP
  if (IP_POOLS[isp] && IP_POOLS[isp][region] && IP_POOLS[isp][region].length > 0) {
    candidates = IP_POOLS[isp][region];
  }

  // 2. 如果没有找到,尝试同ISP其他区域
  if (candidates.length === 0 && IP_POOLS[isp]) {
    for (const r of REGIONS) {
      if (r !== region && IP_POOLS[isp][r] && IP_POOLS[isp][r].length > 0) {
        candidates = candidates.concat(IP_POOLS[isp][r]);
      }
    }
  }

  // 3. 如果还是没有,使用其他ISP的IP
  if (candidates.length === 0) {
    for (const otherIsp in IP_POOLS) {
      if (otherIsp !== isp && IP_POOLS[otherIsp][region] && IP_POOLS[otherIsp][region].length > 0) {
        candidates = candidates.concat(IP_POOLS[otherIsp][region]);
      }
    }
  }

  // 4. 如果还是没有找到可用IP,则抛出错误
  if (candidates.length === 0) {
    throw new Error(ERRORS.NO_IP);
  }

  // 随机选择一个IP,避免单点故障
  return candidates[Math.floor(Math.random() * candidates.length)];
}